{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","defaults","min","max","count","_useState","useState","_useState2","Object","slicedToArray","setCount","_useState3","_useState4","setMin","_useState5","_useState6","setMax","_useState7","_useState8","result","setResult","_useState9","_useState10","resultVisible","setResultVisible","setResults","visible","results","handleCountChange","event","fieldName","setFunc","target","value","parseInt","react_default","a","createElement","className","join","name","htmlFor","id","type","onChange","e","onClick","valid","validateSettings","i","number","Math","floor","random","push","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.dba56a56.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\n\nfunction App() {\n  const defaults = { \"min\": 1, \"max\": 100, \"count\": 10 };\n  const [count, setCount] = useState(defaults[\"count\"]);\n  const [min, setMin] = useState(defaults[\"min\"]);\n  const [max, setMax] = useState(defaults[\"max\"]);\n  const [result, setResult] = useState([]);\n  const [resultVisible, setResultVisible] = useState(false);\n\n  const validateSettings = () => {\n    var valid = true;\n    setResults(false, []);\n    if (min > max) {\n      setResults(true, [\"Min cannot be greater than Max\"]);\n      valid = false;\n    }\n    return valid;\n  }\n  const getRandomNumbers = () => {\n    var valid = validateSettings();\n    if (valid) {\n      var results = [];\n      for (let i = 0; i < count; i++) {\n        var number = Math.floor(Math.random() * (max - min)) + min;\n        results.push(number);\n      }\n      setResults(true, results);\n    }\n  }\n\n  const setResults = (visible, results) => {\n    setResultVisible(visible);\n    setResult(results);\n  }\n\n  const handleCountChange = (event, fieldName, setFunc) => {\n    setResults(false, []);\n    if (event.target.value > 0) {\n      setFunc(parseInt(event.target.value));\n    } else {\n      setFunc(defaults[fieldName]);\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div>\n        <strong>{resultVisible && result.join(\", \")}</strong>\n      </div>\n      <div>\n        <label name=\"min\" htmlFor=\"min\">Min</label>\n      </div>\n      <div>\n        <input id=\"min\" type=\"text\" name=\"min\" value={min}\n          onChange={e => handleCountChange(e, \"min\", setMin)} />\n      </div>\n\n      <div>\n        <label name=\"max\" htmlFor=\"max\">Max</label>\n      </div>\n      <div>\n        <input id=\"max\" type=\"text\" name=\"max\" value={max}\n          onChange={e => handleCountChange(e, \"max\", setMax)} />\n      </div>\n\n      <div>\n        <label name=\"count\" htmlFor=\"count\">Count</label>\n      </div>\n      <div>\n        <input id=\"count\" type=\"text\" name=\"count\" value={count}\n          onChange={e => handleCountChange(e, \"count\", setCount)} />\n      </div>\n\n      <div>\n        <button onClick={getRandomNumbers}>Generate</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}